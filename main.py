from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters.state import State, StatesGroup

import random
import aioschedule
import asyncio
import configparser

config = configparser.ConfigParser()
config.read("config.ini", encoding='utf-8')

admin_id = config.get("SETTING", "admin_id")
TOKEN = config.get("SETTING", "token")

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())


# Check DM of bot
class IsPrivate(BoundFilter):
    async def check(self, message: types.Message):
        if message.chat.type == types.ChatType.PRIVATE and message.from_user.id == int(admin_id):
            return True
        else:
            return False


class Form(StatesGroup):
    form_edit_percent = State()
    form_add_words = State()
    form_remove_words = State()


main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton('üìÉ –°–ø–∏—Å–æ–∫'))
main_menu.add(KeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏'), KeyboardButton('‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏'))


async def save_config(new_config):
    with open("config.ini", "w", encoding='utf-8') as config_file:
        new_config.write(config_file)


@dp.message_handler(commands=['start'])
async def start_menu(message: types.Message):
    if message.chat.type == types.ChatType.PRIVATE and message.from_user.id == int(admin_id):
        await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ', reply_markup=main_menu)
    else:
        await message.answer('–ü—Ä–∏–≤—ñ—Ç')


@dp.message_handler(IsPrivate(), text='üìÉ –°–ø–∏—Å–æ–∫', state="*")
async def list_words(message: types.Message, state: FSMContext):
    try:
        await state.finish()
        words = config.get("SETTING", "word").split('|')
        if words[0] == '':
            await message.answer('‚õî –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç–∏–π')
            return
        txt = 'üìÉ –°–ø–∏—Å–æ–∫ : \n\n'
        for word in words:
            txt += word + '\n'
        await message.answer(txt)
    except Exception as e:
        await message.answer(f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –¥–∞–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–µ–≤–µ–ª–æ–ø–µ—Ä—É: list_word\n {str(e)}')


@dp.message_handler(IsPrivate(), text='‚ûï –î–æ–¥–∞—Ç–∏', state="*")
async def add_words(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ñ—Ä–∞–∑—É: \n<code>–ö–æ–∂–Ω–∞ —Ñ—Ä–∞–∑–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞</code>')
    await Form.form_add_words.set()


@dp.message_handler(IsPrivate(), text='‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏', state="*")
async def del_words(message: types.Message, state: FSMContext):
    try:
        await state.finish()
        words = config.get("SETTING", "word").split('|')
        if not words:
            await message.answer('‚õî –°–ø–∏—Å–æ–∫')
            return
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞.\n'
                             '–ü—Ä–∏–∫–ª–∞–¥: <code>\n1\n1 2 3 4</code>')
        txt = ''
        for en, word in enumerate(config.get("SETTING", "word").split('|')):
            txt += f"{en + 1}. {word}\n"
        await message.answer(txt)
        await Form.form_remove_words.set()
    except Exception as e:
        await message.answer(f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –¥–∞–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–µ–≤–µ–ª–æ–ø–µ—Ä—É: del_words\n {str(e)}')


@dp.message_handler(state=Form.form_remove_words)
async def remove_words(message: types.Message, state: FSMContext):
    try:
        numbers = message.text
        if not numbers.replace(' ', '').isdigit():
            await message.answer('‚õî –í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞')
            return

        words = config.get("SETTING", "word").split('|')

        if len(words) < int(len(numbers.split(' '))):
            await message.answer(f'‚õî –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ: {len(words)}')
            return

        await state.finish()
        x = [x for en, x in enumerate(words) if en + 1 not in [int(item) for item in numbers.split(' ')]]

        config.set("SETTING", "word", '|'.join(x))
        await save_config(config)
        await message.answer('‚úÖ –§—Ä–∞–∑–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ')
    except Exception as e:
        await message.answer(f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –¥–∞–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–µ–≤–µ–ª–æ–ø–µ—Ä—É: remove_words\n {str(e)}')


# Add new word
@dp.message_handler(state=Form.form_add_words)
async def add_words(message: types.Message, state: FSMContext):
    try:
        await state.finish()
        words = config.get("SETTING", "word")

        new_words = '|'.join(message.text.split('\n'))

        if words:
            config.set("SETTING", "word", f"{words}|{new_words}")
        else:
            config.set("SETTING", "word", new_words)
        await save_config(config)
        await message.answer('‚úÖ –§—Ä–∞–∑–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞')
    except Exception as e:
        await message.answer(f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –¥–∞–Ω–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–µ–≤–µ–ª–æ–ø–µ—Ä—É: add_words\n {str(e)}')


############################################## Send ##############################################

async def send_msg():
    words = config.get("SETTING", "word").split('|')
    await bot.send_message(config.get("SETTING", "chat_id"), random.choice(words))


async def scheduler():
    aioschedule.every().day.at(config.get("SETTING", "time")).do(send_msg)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)
